version: '4'

services:
  api-gateway:
    platform: linux/amd64
    build:
      context: ./Gateway
      target: prod
    restart: unless-stopped
    environment:
      JWT_SECRET: $JWT_SECRET
      JWT_EXPIRES_IN: $JWT_EXPIRES_IN
      JWT_REFRESH_EXPIRES_IN: $JWT_REFRESH_EXPIRES_IN
      PORT: $GATEWAY_PORT
      USERSMS_HOST: $USERSMS_HOST
      USERSMS_PORT: $USERSMS_PORT
    ports:
      - $GATEWAY_PORT
    networks:
      - microservices-networks
      - fileserver-networks

  users-ms:
    platform: linux/amd64
    build:
      context: ./UsersMS
      target: prod
    hostname: $USERSMS_HOST
    restart: unless-stopped
    environment:
      PORT: $USERSMS_PORT
      HEALTHCHECK_PORT: $USERSMS_HEALTHCHECK_PORT
      DB_HOST: $USERSDB_HOST
      DB_PORT: $USERSDB_PORT
      DB_NAME: $USERSDB_DATABASE
      DB_USER: $USERSDB_USER
      DB_PASSWORD: $USERSDB_PASSWORD
    ports:
      - $USERSMS_HEALTHCHECK_PORT
    networks:
      - microservices-networks
      - users-db-networks
    depends_on:
      - users-db

  users-db:
    image: mysql:latest
    hostname: $USERSDB_HOST
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: $USERSDB_ROOT_PASSWORD
      MYSQL_DATABASE: $USERSDB_DATABASE
      MYSQL_USER: $USERSDB_USER
      MYSQL_PASSWORD: $USERSDB_PASSWORD
    volumes:
      - ./DockerVolume/users-db:/var/lib/mysql
    networks:
      - users-db-networks

  userprofile-ms:
    platform: linux/amd64
    build:
      context: ./UserProfileMS
      target: prod
    hostname: $USERPROFILEMS_HOST
    restart: unless-stopped
    environment:
      PORT: $USERPROFILEMS_PORT
      HEALTHCHECK_PORT: $USERPROFILEMS_HEALTHCHECK_PORT
      DB_HOST: $USERPROFILEDB_HOST
      DB_PORT: $USERPROFILEDB_PORT
      DB_NAME: $USERPROFILEDB_DATABASE
      DB_USER: $USERPROFILEDB_USER
      DB_PASSWORD: $USERPROFILEDB_PASSWORD
    ports:
      - $USERPROFILEMS_HEALTHCHECK_PORT
    networks:
      - microservices-networks
      - userprofile-db-networks
    depends_on:
      - userprofile-db

  userprofile-db:
    image: mysql:latest
    hostname: $USERPROFILEDB_HOST
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: $USERPROFILEDB_ROOT_PASSWORD
      MYSQL_DATABASE: $USERPROFILEDB_DATABASE
      MYSQL_USER: $USERPROFILEDB_USER
      MYSQL_PASSWORD: $USERPROFILEDB_PASSWORD
    volumes:
      - ./DockerVolume/userprofile-db:/var/lib/mysql
    networks:
      - userprofile-db-networks

  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - 8080
    networks:
      - users-db-networks
      - userprofile-db-networks

  fileserver:
    build: ./FileServer
    hostname: $FILESERVER_HOST
    restart: unless-stopped
    ports: 
      - ${FILESERVER_PORT}
    volumes:
      - ./DockerVolume/files:/app/files
    environment:
      PORT: ${FILESERVER_PORT}
      MAX_FILE_SIZE: 100
    networks:
      - fileserver-networks

networks:
  microservices-networks:
    driver: bridge
  users-db-networks:
    driver: bridge
  userprofile-db-networks:
    driver: bridge
  fileserver-networks:
    driver: bridge